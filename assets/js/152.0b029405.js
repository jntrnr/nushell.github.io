(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{552:function(a,e,t){"use strict";t.r(e);var s=t(42),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"variables-and-invocations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-and-invocations"}},[a._v("#")]),a._v(" Variables and Invocations")]),a._v(" "),t("p",[a._v("There are two types of evaluation expressions in Nushell: variables and invocations. You know that you're looking at an evaluation expression because it begins with a dollar sign ("),t("code",[a._v("$")]),a._v("). This indicates that when Nushell gets the value in this position, it will need to run an evaluation step to process the expression and then use the resulting value. Both evaluation expression forms support a simple form and a 'path' form for working with more complex data.")]),a._v(" "),t("h2",{attrs:{id:"variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[a._v("#")]),a._v(" Variables")]),a._v(" "),t("p",[a._v("The simpler of the two evaluation expressions is the variable. During evaluation, a variable is replaced by its value.")]),a._v(" "),t("p",[a._v("If we create a variable, we can print its contents by using "),t("code",[a._v("$")]),a._v(" to refer to it:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> let my-value = 4\n> echo $my-value\n4\n")])])]),t("h2",{attrs:{id:"variable-paths"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variable-paths"}},[a._v("#")]),a._v(" Variable paths")]),a._v(" "),t("p",[a._v("A variable path works by reaching inside of the contents of a variable, navigating columns inside of it, to reach a final value. Let's say instead of "),t("code",[a._v("4")]),a._v(", we had assigned a table value:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> let my-value = [[name]; [testuser]]\n")])])]),t("p",[a._v("We can use a variable path to evaluate the variable "),t("code",[a._v("$my-value")]),a._v(" and get the value from the "),t("code",[a._v("name")]),a._v(" column in a single step:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> echo $my-value.name\ntestuser\n")])])]),t("h2",{attrs:{id:"invocations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#invocations"}},[a._v("#")]),a._v(" Invocations")]),a._v(" "),t("p",[a._v("What if instead of a value, you needed to run a command and use its output? For this, you can use an invocation.")]),a._v(" "),t("p",[a._v("Invocations also start with "),t("code",[a._v("$")]),a._v(" and are wrapped with parentheses. The parentheses contain a pipeline that will run to completion, and the resulting value will then be used. For example, "),t("code",[a._v("$(ls)")]),a._v(" would run the "),t("code",[a._v("ls")]),a._v(" command and give back the resulting table and "),t("code",[a._v("$(git branch --show-current)")]),a._v(" runs the external git command and returns a string with the name of the current branch.")]),a._v(" "),t("p",[a._v("Invocations can also be pipelines and not just single commands. If we wanted to get a list of filenames larger than ten kilobytes, we can use an invocation to run a pipelines and assign this to a variable:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> let names-of-big-files = $(ls | where size > 10kb)\n> echo $names-of-big-files\n───┬────────────┬──────┬──────────┬──────────────\n # │    name    │ type │   size   │   modified   \n───┼────────────┼──────┼──────────┼──────────────\n 0 │ Cargo.lock │ File │ 155.3 KB │ 17 hours ago \n 1 │ README.md  │ File │  15.9 KB │ 17 hours ago \n───┴────────────┴──────┴──────────┴──────────────\n")])])]),t("h2",{attrs:{id:"invocation-paths"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#invocation-paths"}},[a._v("#")]),a._v(" Invocation paths")]),a._v(" "),t("p",[a._v("Invocations also support paths. For example, let's say we wanted to get a list of the filenames in the current directory. One way to do this is to use a pipeline:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> ls | get name\n")])])]),t("p",[a._v("We can do a very similar action in a single step using an invocation path:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("> echo $(ls).name\n")])])]),t("p",[a._v("It depends on the needs of the code and your particular style which form works best for you.")])])}),[],!1,null,null,null);e.default=n.exports}}]);