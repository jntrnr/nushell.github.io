(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{529:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("Nu has a small, but growing, number of internal variables you can set to change how it looks and how it operates.  Below is a list of the current variables, their types, and a description of how they're used")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Variable")]),e._v(" "),a("th",[e._v("Type")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("completion_mode")]),e._v(" "),a("td",[e._v('"list" or "circular"')]),e._v(" "),a("td",[e._v("the style of autocompletion to use")])]),e._v(" "),a("tr",[a("td",[e._v("ctrlc_exit")]),e._v(" "),a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("whether or not to exit Nu after multiple ctrl-c presses")])]),e._v(" "),a("tr",[a("td",[e._v("disable_table_indexes")]),e._v(" "),a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("removes the table index column")])]),e._v(" "),a("tr",[a("td",[e._v("edit_mode")]),e._v(" "),a("td",[e._v('"vi" or "emacs"')]),e._v(" "),a("td",[e._v('changes line editing to "vi" or "emacs" mode')])]),e._v(" "),a("tr",[a("td",[e._v("env")]),e._v(" "),a("td",[e._v("row")]),e._v(" "),a("td",[e._v("the environment variables to pass to external commands")])]),e._v(" "),a("tr",[a("td",[e._v("header_align")]),e._v(" "),a("td",[e._v('"center", "right", or other')]),e._v(" "),a("td",[e._v("aligns table headers center-, right-, or left-aligned")])]),e._v(" "),a("tr",[a("td",[e._v("key_timeout")]),e._v(" "),a("td",[e._v("integer")]),e._v(" "),a("td",[e._v("the timeout used to switch between edit modes")])]),e._v(" "),a("tr",[a("td",[e._v("nonzero_exit_errors")]),e._v(" "),a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("whether to print errors for non-zero exit codes for externals")])]),e._v(" "),a("tr",[a("td",[e._v("path")]),e._v(" "),a("td",[e._v("list of strings")]),e._v(" "),a("td",[e._v("PATH to use to find binaries")])]),e._v(" "),a("tr",[a("td",[e._v("startup")]),e._v(" "),a("td",[e._v("list of strings")]),e._v(" "),a("td",[e._v("commands, like "),a("code",[e._v("alias")]),e._v("es, to run when nushell starts")])]),e._v(" "),a("tr",[a("td",[e._v("table_mode")]),e._v(" "),a("td",[e._v('"light" or other')]),e._v(" "),a("td",[e._v("enable lightweight or normal tables")])]),e._v(" "),a("tr",[a("td",[e._v("no_auto_pivot")]),e._v(" "),a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("whether or not to automatically pivot single-row results")])]),e._v(" "),a("tr",[a("td",[e._v("skip_welcome_message")]),e._v(" "),a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("whether or not to skip displaying the welcome message when nushell starts")])])])]),e._v(" "),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("h3",{attrs:{id:"setting-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-variables"}},[e._v("#")]),e._v(" Setting variables")]),e._v(" "),a("p",[e._v("To set one of these variables, you can use "),a("code",[e._v("config set")]),e._v(". For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('> config set edit_mode "vi"\n')])])]),a("h3",{attrs:{id:"setting-a-variable-from-the-pipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-a-variable-from-the-pipeline"}},[e._v("#")]),e._v(" Setting a variable from the pipeline")]),e._v(" "),a("p",[e._v("There's an additional way to set a variable, and that is to use the contents of the pipeline as the value you want to use for the variable. For this, use the "),a("code",[e._v("set_into")]),e._v(" flag:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('> echo "bar" | config set_into foo\n')])])]),a("p",[e._v("This is helpful when working with the "),a("code",[e._v("env")]),e._v(" and "),a("code",[e._v("path")]),e._v(" variables.")]),e._v(" "),a("h3",{attrs:{id:"listing-all-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listing-all-variables"}},[e._v("#")]),e._v(" Listing all variables")]),e._v(" "),a("p",[e._v("Running the "),a("code",[e._v("config")]),e._v(" command without any arguments will show a table of the current configuration settings:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config\n─────────────────┬──────────────────\n completion_mode │ circular \n env             │ [row 51 columns] \n path            │ [table 9 rows] \n startup         │ [table 1 rows] \n─────────────────┴──────────────────\n")])])]),a("p",[e._v("Note: if you haven't set any configuration variables, yet, this may be empty.")]),e._v(" "),a("h3",{attrs:{id:"getting-a-variable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-a-variable"}},[e._v("#")]),e._v(" Getting a variable")]),e._v(" "),a("p",[e._v("Using the "),a("code",[e._v("get")]),e._v(" flag, you can retrieve the value for a given variable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config get edit_mode\n")])])]),a("h3",{attrs:{id:"removing-a-variable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removing-a-variable"}},[e._v("#")]),e._v(" Removing a variable")]),e._v(" "),a("p",[e._v("To remove a variable from the configuration, use the "),a("code",[e._v("remove")]),e._v(" flag:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config remove edit_mode\n")])])]),a("h3",{attrs:{id:"clearing-the-whole-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clearing-the-whole-configuration"}},[e._v("#")]),e._v(" Clearing the whole configuration")]),e._v(" "),a("p",[e._v("If you want to clear the whole configuration and start fresh, you can use the "),a("code",[e._v("clear")]),e._v(" flag. Of course, be careful with this as once you run it, the configuration file is also cleared.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config clear\n")])])]),a("h3",{attrs:{id:"finding-where-the-configuration-is-stored"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finding-where-the-configuration-is-stored"}},[e._v("#")]),e._v(" Finding where the configuration is stored")]),e._v(" "),a("p",[e._v("The configuration file is loaded from a default location. To find what this location is on your system, you can ask for it using the "),a("code",[e._v("path")]),e._v(" flag:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config path\n/home/jonathant/.config/nu/config.toml\n")])])]),a("h3",{attrs:{id:"loading-the-config-from-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loading-the-config-from-a-file"}},[e._v("#")]),e._v(" Loading the config from a file")]),e._v(" "),a("p",[e._v("You may wish to load the configuration from a different file than the default. To do so, use the "),a("code",[e._v("load")]),e._v(" parameter:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config load myconfiguration.toml\n")])])]),a("h2",{attrs:{id:"configuring-nu-as-a-login-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-nu-as-a-login-shell"}},[e._v("#")]),e._v(" Configuring Nu as a login shell")]),e._v(" "),a("p",[e._v("To use Nu as a login shell, you'll need to configure the "),a("code",[e._v("path")]),e._v(" and "),a("code",[e._v("env")]),e._v(" configuration variables. With these, you'll have enough support to run external commands as a login shell.")]),e._v(" "),a("p",[e._v("Before switching, run Nu inside of another shell, like Bash. Then, take the environment and PATH from that shell with the following commands:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config set path $nu.path\n> config set env  $nu.env\n")])])]),a("p",[e._v("Versions before 0.7.2 used:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> config --set [path $nu:path]\n> config --set [env $nu:env]\n")])])]),a("p",[e._v("The "),a("code",[e._v("$nu.path")]),e._v(" and "),a("code",[e._v("$nu.env")]),e._v(" values are set to the current PATH and environment variables, respectively. Once you set these into the configuration, they'll be available later when using Nu as a login shell.")]),e._v(" "),a("p",[e._v("Next, on some distros you'll also need to ensure Nu is in the /etc/shells list:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> cat /etc/shells\n# /etc/shells: valid login shells\n/bin/sh\n/bin/dash\n/bin/bash\n/bin/rbash\n/usr/bin/screen\n/usr/bin/fish\n/home/jonathan/.cargo/bin/nu\n")])])]),a("p",[e._v("With this, you should be able to "),a("code",[e._v("chsh")]),e._v(" and set Nu to be your login shell. After a logout, on your next login you should be greeted with a shiny Nu prompt.")]),e._v(" "),a("h2",{attrs:{id:"prompt-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prompt-configuration"}},[e._v("#")]),e._v(" Prompt configuration")]),e._v(" "),a("p",[e._v("Prompt configuration is handled by setting the value of "),a("code",[e._v("prompt")]),e._v(".")]),e._v(" "),a("p",[e._v("For example, to use "),a("a",{attrs:{href:"https://starship.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Starship"),a("OutboundLink")],1),e._v(", download it and enter the following command (0.18.2 and later):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("config set prompt `echo $(starship prompt)`\n")])])]),a("p",[e._v("Now restart Nu.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nushell on 📙 master [$] is 📦 v0.18.2 via 🦀 v1.48.0-nightly\n❯\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);